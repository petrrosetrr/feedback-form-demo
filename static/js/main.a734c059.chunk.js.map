{"version":3,"sources":["components/FileInput/index.tsx","components/Form/index.tsx","components/App/index.tsx","index.tsx"],"names":["FileInput","name","accept","rest","useField","value","meta","setValue","input","useRef","console","log","error","ref","className","type","onChange","e","file","currentTarget","files","reader","FileReader","onload","size","data","result","readAsDataURL","Button","icon","negative","touched","labelPosition","onClick","current","click","Icon","validationSchema","Yup","shape","email","required","message","trim","min","category","surname","when","is","length","then","otherwise","nullable","max","oneOf","initialValues","FeedbackForm","useState","networkError","setNetworkError","handleSubmit","values","a","resetForm","axios","post","onSubmit","isSubmitting","cn","Container","text","textAlign","target","rel","href","errorPrompt","label","placeholder","options","Image","rounded","src","fluid","primary","positive","loading","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a734c059.chunk.js","sourcesContent":["import React, {ChangeEvent, useRef} from 'react';\nimport {useField} from \"formik\";\nimport {Button, Icon} from \"semantic-ui-react\";\n\ninterface IProps {\n    name: string;\n    accept?: string;\n\n    [key: string]: any;\n}\n\nconst FileInput: React.FC<IProps> = ({name, accept, ...rest}) => {\n    const [{value}, meta, {setValue}] = useField(name)\n    const input = useRef<HTMLInputElement>(null);\n    const clickHandler = () => {\n        input.current?.click();\n    };\n    const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const file = e.currentTarget.files?.[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                setValue({\n                    name: file.name,\n                    size: file.size,\n                    type: file.type,\n                    data: reader.result,\n                })\n            }\n            if (file) {\n                reader.readAsDataURL(file);\n            }\n        }\n    };\n\n    console.log(meta.error);\n\n    return (\n        <>\n            <input ref={input} className={'visually-hidden'} type=\"file\" accept={accept} onChange={changeHandler}/>\n            <Button\n                icon\n                negative={!!meta.error && meta.touched}\n                labelPosition='left'\n                type={'button'}\n                onClick={clickHandler}\n                {...rest}>\n                <Icon name='file'/>\n                {\n                    meta.error && meta.touched ? 'Максимальный размер - 2Мб, формат - jpg или png' : (value?.name || 'Выберите файл')\n                }\n            </Button>\n        </>\n    );\n};\n\nexport default FileInput;\n","import {Formik, FormikHelpers} from 'formik';\nimport React, {useState} from 'react';\nimport * as Yup from 'yup';\nimport cn from 'classnames';\nimport axios from \"axios\";\nimport './index.scss';\nimport {Button, Container, Image} from \"semantic-ui-react\";\nimport {Form, Input, ResetButton, Select, TextArea} from \"formik-semantic-ui-react\";\nimport FileInput from \"../FileInput\";\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string().email('Невалидный email').required('Обязательное поле'),\n    message: Yup.string().trim().min(10, 'Минимальная длина - 10 символов').required('Обязательное поле'),\n    category: Yup.string().min(1).required('Обязательное поле'),\n    surname: Yup.string().trim().when('name', {\n        is: (name: string) => !name || name.trim().length === 0,\n        then: Yup.string().trim().required('Обязательное поле'),\n        otherwise: Yup.string()\n    }),\n    name: Yup.string().trim().when('surname', {\n        is: (surname: string) => !surname || surname.trim().length === 0,\n        then: Yup.string().trim().required('Обязательное поле'),\n        otherwise: Yup.string()\n    }),\n    file: Yup.object().nullable().shape({\n        size: Yup.number().max(2000000),\n        type: Yup.string().oneOf([\"image/jpeg\", \"image/png\"]),\n    })\n}, [['name', 'surname']])\n\ninterface IFeedbackForm {\n    email: string;\n    message: string;\n    category: string;\n    name: string;\n    surname: string;\n    file: {\n        size: number;\n        type: string;\n        name: string;\n        data: string | null;\n    } | null;\n}\n\nexport const initialValues: IFeedbackForm = {\n    email: '',\n    message: '',\n    category: '',\n    name: '',\n    surname: '',\n    file: null\n};\n\nconst FeedbackForm = () => {\n    const [networkError, setNetworkError] = useState(false);\n\n    const handleSubmit = async (values: IFeedbackForm, {resetForm}: FormikHelpers<IFeedbackForm>) => {\n        try {\n            await axios.post('https://webhook.site/2099961d-817d-4ef5-bd6f-2792184e520e', values);\n            setNetworkError(false);\n            resetForm();\n        } catch (error) {\n            setNetworkError(true);\n        }\n    }\n\n    return (\n        <Formik initialValues={initialValues} onSubmit={handleSubmit} validationSchema={validationSchema}>\n            {\n                ({values, isSubmitting}) => (\n                    <Form\n                        className={cn({'form_disabled': isSubmitting})}\n                        onChange={() => setNetworkError(false)}>\n                        <Container text textAlign={'center'} className={'form__text'}>\n                            Запрос отправляется на <a target='_blank' rel='noreferrer'\n                                                      href='https://webhook.site/#!/2099961d-817d-4ef5-bd6f-2792184e520e'>webhook.site</a>\n                        </Container>\n                        <Input\n                            errorPrompt\n                            name={'email'}\n                            label={'Почта'}\n                            placeholder={'test@gmail.com'}\n                        />\n                        <Input\n                            errorPrompt\n                            name={'name'}\n                            label={'Имя'}\n                            placeholder={'Иван'}/>\n                        <Input\n                            errorPrompt\n                            name={'surname'}\n                            label={'Фамилия'}\n                            placeholder={'Иванов'}/>\n                        <Select\n                            errorPrompt\n                            label={'Выберите тип сообщения'}\n                            name={'category'}\n                            placeholder={'Не выбрано'}\n                            options={[\n                                {text: 'Сообщение', value: 'message'},\n                                {text: 'Другое', value: 'other'}]}/>\n                        <FileInput\n                            name={'file'}\n                            accept={'image/png, image/jpeg'}/>\n                        <Image\n                            rounded\n                            className={'form__image-preview'}\n                            src={values.file?.data || 'https://react.semantic-ui.com/images/wireframe/square-image.png'}/>\n                        <TextArea\n                            errorPrompt\n                            className={'form__message'}\n                            name={'message'}\n                            placeholder={'Ваше сообщение'}/>\n                        <ResetButton fluid primary>\n                            Сбросить форму\n                        </ResetButton>\n                        <Button\n                            fluid\n                            positive\n                            type={'submit'}\n                            negative={networkError}\n                            loading={isSubmitting}>\n                            {networkError ? 'Попробовать еще раз' : 'Отправить'}\n                        </Button>\n                    </Form>\n                )\n            }\n        </Formik>\n    );\n};\n\nexport default FeedbackForm;\n","import React from 'react';\nimport FeedbackForm from \"../Form\";\nimport './index.scss';\n\nconst App = () => {\n    return (\n        <div className={'app'}>\n            <FeedbackForm/>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}